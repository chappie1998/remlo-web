// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  phone         String?   @unique
  emailVerified DateTime?
  phoneVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Account abstraction related fields
  solanaAddress    String?   @unique  // Public address (public key)
  encryptedKeypair String?           // Encrypted keypair
  hasPasscode      Boolean   @default(false)
  passcodeSetAt    DateTime?

  // Relations
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Transaction {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  txData      String   // JSON stringified transaction data
  status      String   // pending, approved, rejected, executed
  signature   String?  // Transaction signature when executed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  executedAt  DateTime?

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PaymasterInfo {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  networkName    String
  gasSponsored   Int      @default(0) // Count of sponsored transactions
  lastSponsoredAt DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
