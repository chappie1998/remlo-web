generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id @default(cuid())
  name              String?
  username          String?          @unique
  email             String           @unique
  phone             String?          @unique
  emailVerified     DateTime?
  phoneVerified     DateTime?
  image             String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  solanaAddress     String?          @unique
  encryptedKeypair  String?
  hasPasscode       Boolean          @default(false)
  passcodeSetAt     DateTime?
  passcodeHash      String?
  recoveryKey       String?
  mpcServerShare    String?
  mpcSalt           String?
  mpcBackupShare    String?
  usesMPC           Boolean          @default(false)
  evmAddress        String?
  accounts          Account[]
  contacts          Contact[]        @relation("UserContacts")
  sentPayments      Payment[]        @relation("SentPayments")
  paymentLinks      PaymentLink[]    @relation("CreatedPaymentLinks")
  paymentRequests   PaymentRequest[]
  requestedPayments PaymentRequest[] @relation("RequestedPayments")
  savedTemplates    SavedTemplate[]  @relation("UserTemplates")
  sessions          Session[]
  transactions      Transaction[]

  @@index([createdAt])
  @@index([username])
  @@index([email, solanaAddress])
  @@index([hasPasscode, usesMPC])
  @@index([username, hasPasscode, solanaAddress])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId, provider])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
  @@index([sessionToken, expires])
  @@index([userId, expires])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Transaction {
  id         String    @id @default(cuid())
  userId     String
  txData     String
  status     String
  signature  String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  executedAt DateTime?
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([signature])
  @@index([userId, status, createdAt])
  @@index([userId, createdAt])
  @@index([signature, status])
}

model PaymasterInfo {
  id              String    @id @default(cuid())
  networkName     String
  gasSponsored    Int       @default(0)
  lastSponsoredAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model PaymentRequest {
  id          String    @id @default(cuid())
  shortId     String    @unique
  creatorId   String
  recipientId String?
  amount      String
  tokenType   String
  note        String?
  status      String
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  payment     Payment?
  creator     User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  recipient   User?     @relation("RequestedPayments", fields: [recipientId], references: [id])

  @@index([creatorId])
  @@index([recipientId])
  @@index([status])
  @@index([createdAt])
  @@index([expiresAt])
  @@index([creatorId, status, createdAt])
  @@index([recipientId, status, createdAt])
}

model PaymentLink {
  id                   String    @id @default(cuid())
  shortId              String    @unique
  creatorId            String
  amount               String
  tokenType            String
  note                 String?
  status               String
  verificationData     String
  delegationTx         String?
  claimedBy            String?
  claimedAt            DateTime?
  expiresAt            DateTime
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  claimedTransactionId String?
  creator              User      @relation("CreatedPaymentLinks", fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([creatorId])
  @@index([status])
  @@index([claimedBy])
  @@index([createdAt])
  @@index([expiresAt])
}

model Payment {
  id                   String         @id @default(cuid())
  payerId              String
  paymentRequestId     String         @unique
  transactionSignature String?
  status               String
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  payer                User           @relation("SentPayments", fields: [payerId], references: [id], onDelete: Cascade)
  paymentRequest       PaymentRequest @relation(fields: [paymentRequestId], references: [id], onDelete: Cascade)

  @@index([payerId])
  @@index([status])
  @@index([transactionSignature])
  @@index([createdAt])
  @@index([payerId, status, createdAt])
}

model Contact {
  id            String   @id @default(cuid())
  nickname      String
  username      String?
  solanaAddress String
  isFavorite    Boolean  @default(false)
  lastUsed      DateTime @default(now())
  createdAt     DateTime @default(now())
  userId        String
  user          User     @relation("UserContacts", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, solanaAddress])
  @@index([userId])
  @@index([userId, isFavorite, lastUsed])
  @@index([userId, username])
}

model SavedTemplate {
  id          String   @id @default(cuid())
  name        String
  recipient   String
  amount      String
  tokenType   String
  description String?
  frequency   String?
  createdAt   DateTime @default(now())
  lastUsed    DateTime @default(now())
  userId      String
  user        User     @relation("UserTemplates", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([name])
}
